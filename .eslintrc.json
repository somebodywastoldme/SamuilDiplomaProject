{
	"env": {
		"browser": true,
		"es6": true,
		"node": true
	},
	"ignorePatterns": ["**/*.js"],
	"overrides": [
		{
			"files": "**/*.graphql",
			"extends": "plugin:@graphql-eslint/operations-recommended",
			"plugins": ["@graphql-eslint", "prettier"],
			"parserOptions": {
				"operations": "**/*.graphql",
				"schema": "schema/generated/apolloExtendedGraphQlScheme.graphql"
			},
			"rules": {
				"@graphql-eslint/executable-definitions": "off",
				"@graphql-eslint/fields-on-correct-type": "error",
				"@graphql-eslint/fragments-on-composite-type": "error",
				"@graphql-eslint/known-argument-names": "error",
				"@graphql-eslint/known-directives": "error",
				"@graphql-eslint/known-type-names": "error",
				"@graphql-eslint/no-anonymous-operations": "error",
				"@graphql-eslint/no-deprecated": "off",
				"@graphql-eslint/no-unused-variables": "error",
				"@graphql-eslint/provided-required-arguments": "error",
				"@graphql-eslint/scalar-leafs": "error",
				"@graphql-eslint/unique-argument-names": "error",
				"@graphql-eslint/unique-input-field-names": "error",
				"@graphql-eslint/unique-variable-names": "error",
				"@graphql-eslint/value-literals-of-correct-type": "error",
				"@graphql-eslint/variables-are-input-types": "error",
				"@graphql-eslint/variables-in-allowed-position": "error",
				"@graphql-eslint/require-id-when-available": "off",
				"@graphql-eslint/no-unused-fragments": "off",
				"@graphql-eslint/selection-set-depth": ["error", { "maxDepth": 20}],
				"@graphql-eslint/naming-convention": [
					"warn",
					{
						"VariableDefinition": "camelCase",
						"OperationDefinition": {
							"style": "PascalCase",
							"forbiddenPrefixes": ["Query", "Mutation", "Subscription", "Get"],
							"forbiddenSuffixes": ["Query", "Mutation", "Subscription"]
						},
						"FragmentDefinition": {
							"style": "PascalCase",
							"forbiddenPrefixes": ["Fragment"],
							"forbiddenSuffixes": ["Fragment"]
						}
					}
				],
				"@graphql-eslint/match-document-filename": [
					"error",
					{
						"fileExtension": ".graphql",
						"query": { "style": "PascalCase", "suffix": "Query" },
						"mutation": { "style": "PascalCase", "suffix": "Mutation" },
						"fragment": { "style": "PascalCase", "suffix": "Fragment" }
					}
				],
				"prettier/prettier": ["error", { "endOfLine": "auto", "printWidth": 150 }]
			}
		},
		{
			"files": ["**/*.{ts,tsx}"],
			"plugins": [
				"react",
				"react-hooks",
				"@typescript-eslint",
				"unused-imports",
				"promise"
			],
			"extends": [
				"eslint:recommended",
				"plugin:import/warnings",
				"plugin:react/recommended",
				"plugin:@typescript-eslint/recommended",
				"plugin:@typescript-eslint/recommended-requiring-type-checking"
			],
			"parser": "@typescript-eslint/parser",
			"parserOptions": {
				"project": "tsconfig.eslint.json",
				"ecmaVersion": "latest",
				"sourceType": "module",
				"ecmaFeatures": {
					"jsx": true
				}
			},
			"rules": {
				"react/jsx-tag-spacing": [
					"error", 
					{
						"closingSlash": "never",
						"beforeSelfClosing": "never",
						"afterOpening": "never",
						"beforeClosing": "proportional-always"
					}
				],
				"react/jsx-closing-tag-location": "error",
				"react/jsx-child-element-spacing": "error",
				"react/jsx-curly-brace-presence": ["error", { "props": "always", "children": "always", "propElementValues": "always" }],
				"react/jsx-curly-spacing": ["error", { "when": "never", "attributes": { "allowMultiline": true }, "children": false }],
				"react/jsx-equals-spacing": ["error", "never"],
				"react/jsx-filename-extension": ["error", { "extensions": [".tsx"] }],
				"react/jsx-first-prop-new-line": ["error", "multiline-multiprop"],
				"react/jsx-closing-bracket-location": ["error", "tag-aligned"],
				"react/jsx-fragments": ["error", "syntax"],
				"react/jsx-key": ["error", { "checkFragmentShorthand": true, "checkKeyMustBeforeSpread": true, "warnOnDuplicates": true }],
				"import/no-duplicates": "error",
				"react/jsx-max-depth": ["warn", { "max": 10 }],
				"react/jsx-max-props-per-line": ["error", { "maximum": { "single": 5, "multi": 1 } }],
				"react/jsx-newline": ["error", { "prevent": true }],
				"react/jsx-pascal-case": ["error", { "allowAllCaps": false, "allowNamespace": false, "allowLeadingUnderscore": false }],
				"react/jsx-no-bind": ["error", {
					"ignoreDOMComponents": false,
					"ignoreRefs": false,
					"allowArrowFunctions": true,
					"allowFunctions": false,
					"allowBind": false
				}],
				"react/jsx-no-constructed-context-values": "error",
				"react/jsx-no-literals": "error",
				"react/jsx-no-useless-fragment": ["error", { "allowExpressions": true }],
				"react/jsx-one-expression-per-line": ["error", { "allow": "single-child" }],
				"react/jsx-props-no-multi-spaces": "error",
				"react/jsx-wrap-multilines": ["error", {
					"declaration": "parens-new-line",
					"assignment": "parens-new-line",
					"return": "parens-new-line",
					"arrow": "ignore"
					// "condition": "parens-new-line",
					// "logical": "ignore",
					// "prop": "ignore"
				}],
				"react/function-component-definition": ["error", { "namedComponents": "arrow-function", "unnamedComponents": "arrow-function" }],
				"react/react-in-jsx-scope": "off",
				"react/no-direct-mutation-state": "error",
				"react/no-find-dom-node": "error",
				"react/self-closing-comp": ["error", {
					"component": true,
					"html": true
				}],
				"react/void-dom-elements-no-children": "error",
				"@typescript-eslint/array-type": "error",
				"indent": ["error", "tab", { "SwitchCase": 1 }],
				"@typescript-eslint/member-ordering": [
					"error",
					{
						"default": [
							"private-constructor",
							"protected-constructor",
							"public-constructor",
							"private-static-field",
							"protected-static-field",
							"public-static-field",
							"private-instance-field",
							"protected-instance-field",
							"public-instance-field",
							"private-static-method",
							"protected-static-method",
							"public-static-method",
							"private-instance-method",
							"protected-instance-method",
							"public-instance-method"
						]
					}
				],
				"@typescript-eslint/no-explicit-any": ["warn", { "ignoreRestArgs": true }],
				"@typescript-eslint/no-parameter-properties": "off",
				"@typescript-eslint/no-var-requires": "off",
				"@typescript-eslint/prefer-for-of": "error",
				"@typescript-eslint/prefer-function-type": "error",
				"@typescript-eslint/quotes": [ "error", "single", { "avoidEscape": true }],
				"@typescript-eslint/unified-signatures": "error",
				"camelcase": [0, "error"],
				"comma-dangle": [
					"error",
					{
						"objects": "never",
						"arrays": "never",
						"functions": "never"
					}
				],
				"complexity": "off",
				"constructor-super": "error",
				"dot-notation": "off",
				"eol-last": "off",
				"eqeqeq": [
					"error",
					"always"
				],
				"object-curly-spacing": ["error", "always", { "objectsInObjects": true }],
				"object-curly-newline": [
					"error", 
					{ "multiline": true, "consistent": true }
				],
				"array-bracket-spacing": [
					2,
					"never"
				],		
				"guard-for-in": "error",
				"id-blacklist": [
					2,
					"any",
					"Number",
					"number",
					"String",
					"string",
					"Boolean",
					"boolean",
					"Undefined",
					"undefined"
				],
				"id-match": "error",
				"import/order": [
					"error",
					{
						"groups": [
							"internal",
							"external",
							"parent",
							"sibling",
							"builtin",
							"index"
						],
						"alphabetize": {
							"order": "asc",
							"caseInsensitive": true
						},
						"newlines-between": "always"
					}
				],
				"max-classes-per-file": [
					"error",
					1
				],
				"max-len": "off",
				"new-parens": "error",
				"no-bitwise": "error",
				"no-caller": "error",
				"no-cond-assign": "error",
				"no-console": "off",
				"no-debugger": "off",
				"no-empty": "error",
				"no-eval": "error",
				"no-fallthrough": "off",
				"no-invalid-this": "off",
				"no-new-wrappers": "error",
				"no-named-as-default": [0],
				"no-shadow": "off",
				"no-throw-literal": "error",
				"no-trailing-spaces": "error",
				"no-undef-init": "error",
				"no-undef": [0],
				"no-underscore-dangle": [0],
				"no-unsafe-finally": "error",
				"no-unused-expressions": "off",
				"no-unused-labels": "error",
				"no-var": "off",
				"object-shorthand": "error",
				"no-control-regex": "off",
				"one-var": [
					"error",
					"never"
				],
				"radix": "off",
				"spaced-comment": "error",
				"use-isnan": "error",
				"valid-typeof": "off",
				"keyword-spacing": "error",
				"space-before-blocks": ["error", { "classes": "always" }],
				"arrow-spacing": "error",
				"arrow-parens": "error",
				"comma-spacing":"error",
				"space-infix-ops":"error",
				"import/no-relative-parent-imports": "error",
				"switch-colon-spacing": [
					"error", {
						"after": true,
						"before": false
					}
				],
				// "block-spacing": "always",
				"no-restricted-syntax": [
					"error",
					{
					  // test for window.top.askodReact
					  "selector": "MemberExpression[object.type=MemberExpression][object.object.type=Identifier][object.object.name=window][object.property.type=Identifier][object.property.name=top][property.type=Identifier][property.name=askodReact]",
					  "message": "Use 'context' instead"
					},
					{
						// test for window.askodReact
						"selector": "MemberExpression[object.type=Identifier][object.name=window][property.type=Identifier][property.name=askodReact]",
						"message": "Use 'context' instead"
					},
					{
						// test for .askodReact
						"selector": "MemberExpression[property.type=Identifier][property.name=askodReact]",
						"message": "Use 'context' instead"
					}
				],
				"promise/prefer-await-to-then": "error",
				"prefer-arrow-callback": "error",
				"@typescript-eslint/await-thenable": [
					"error"
				],
				"@typescript-eslint/no-for-in-array": [
					"error"
				],
				"@typescript-eslint/no-misused-promises": [
					"error",
					{
					  "checksConditionals": true,
					  "checksVoidReturn": {
							"attributes": false
						}
					}
				],
				"@typescript-eslint/prefer-enum-initializers": [
					"error"
				],
				"@typescript-eslint/no-unnecessary-type-assertion": [
					"error"
				],
				"@typescript-eslint/prefer-includes": [
					"error"
				],
				"@typescript-eslint/prefer-regexp-exec": [
					"error"
				],
				"@typescript-eslint/prefer-string-starts-ends-with": [
					"error"
				],
				"require-await": [
					"off"
				],
				"@typescript-eslint/require-await": [
					"error"
				],
				"@typescript-eslint/unbound-method": [
					"error"
				],
				"prefer-const": [
					"error"
				],
				"prefer-rest-params": [
					"error"
				],
				"prefer-spread": [
					"error"
				],
				"@typescript-eslint/adjacent-overload-signatures": [
					"error"
				],
				"@typescript-eslint/ban-ts-comment": [
					"off"
				],
				"@typescript-eslint/ban-types": [
					"error"
				],
				"@typescript-eslint/camelcase": [
					0,
					"error"
				],
				"@typescript-eslint/consistent-type-assertions": [
					"error"
				],
				"@typescript-eslint/explicit-function-return-type": [
					"error"
				],
				"@typescript-eslint/naming-convention": [
					"error",
					{
						"selector": "interface",
						"format": ["PascalCase"],
						"custom": {
							"regex": "^I[A-Z]",
							"match": true
						}
					},
					{
						"selector": "typeLike",
						"format": ["PascalCase"]
					}
					// {
					//   "selector": "default",
					//   "format": ["camelCase"]
					// },
					// {
					//   "selector": "variable",
					//   "format": ["camelCase", "UPPER_CASE"]
					// },
					// {
					//   "selector": "parameter",
					//   "format": ["camelCase"],
					//   "leadingUnderscore": "allow"
					// },
					// {
					//   "selector": "memberLike",
					//   "modifiers": ["private"],
					//   "format": ["camelCase"],
					//   "leadingUnderscore": "require"
					// },
				],
				"no-multi-spaces": "error",
				"key-spacing": [
					"error", 
					{ "beforeColon": false, "afterColon": true }
				],
				"semi-spacing": ["error", {"before": false, "after": true}],
				"computed-property-spacing": ["error", "never"],
				"space-in-parens": ["error", "never"],
				"lines-between-class-members": ["error", "always", { "exceptAfterSingleLine": true }],
				"no-multiple-empty-lines": [
					"error", 
					{
						"max": 1,
						"maxEOF": 0,
						"maxBOF": 0
					}
				],
				"padding-line-between-statements": [
					"error",
					{ "blankLine": "always", "prev": ["*"], "next": ["class"]},
					{ "blankLine": "always", "prev": ["class"], "next": ["*"]},
					{ "blankLine": "always", "prev": ["*"], "next": ["export"]},
					{ "blankLine": "always", "prev": ["export"], "next": ["*"]},
					{ "blankLine": "always", "prev": ["*"], "next": ["function"]},
					{ "blankLine": "always", "prev": ["function"], "next": ["*"]}
				],
				// "padded-blocks": [
				// 	"error", { "classes": "always" }
				// ],
				"space-before-function-paren": [
					"error", 
					{
						"anonymous": "never",
						"named": "never",
						"asyncArrow": "always"
					}
				],
				"brace-style": ["error", "1tbs", { "allowSingleLine": true }],
				"no-constant-condition": ["error", { "checkLoops": false }],
				"vars-on-top": "error",
				"@typescript-eslint/no-floating-promises": [
					"error"
				],
				"@typescript-eslint/no-confusing-void-expression": [
					"error",
					{ "ignoreVoidOperator": true }
				],
				"@typescript-eslint/no-unsafe-assignment": [
					"off"
				],
				"@typescript-eslint/no-unsafe-member-access": [
					"off"
				],
				"@typescript-eslint/no-unsafe-return": [
					"off"
				],
				"@typescript-eslint/no-unsafe-call": [
					"off"
				],
				"@typescript-eslint/no-shadow": ["error"],
				"@typescript-eslint/member-delimiter-style": [
					"error"
				],
				"no-array-constructor": [
					"off"
				],
				"@typescript-eslint/no-array-constructor": [
					"error"
				],
				"no-empty-function": [
					"off"
				],
				"@typescript-eslint/no-empty-function": [
					"error"
				],
				"@typescript-eslint/no-empty-interface": [
					"error"
				],
				"@typescript-eslint/no-inferrable-types": [
					"error"
				],
				"@typescript-eslint/no-misused-new": [
					"error"
				],
				"@typescript-eslint/no-namespace": [
					"error"
				],
				"@typescript-eslint/no-non-null-assertion": [
					"error"
				],
				"@typescript-eslint/no-this-alias": [ 0,
					"error"
				],
				"@typescript-eslint/no-unused-vars": "off",
				"unused-imports/no-unused-imports": "error",
				"unused-imports/no-unused-vars": [
					"error",
					{ "vars": "all", "varsIgnorePattern": "^_", "args": "none", "argsIgnorePattern": "^_args", "ignoreRestSiblings": true }
				],
				"@typescript-eslint/no-use-before-define": [
					"error"
				],
				"@typescript-eslint/prefer-namespace-keyword": [
					"error"
				],
				"@typescript-eslint/triple-slash-reference": [
					"error"
				],
				"@typescript-eslint/type-annotation-spacing": [
					"error"
				],
				"@typescript-eslint/no-unsafe-argument": [
					"off"
				],
				"semi": "off",
				"@typescript-eslint/semi": ["error"],
				"react/prop-types": 0,
				"react-hooks/rules-of-hooks": "error",
				"react-hooks/exhaustive-deps": "off",
				"no-restricted-imports": [
					"error",
					{
						"patterns": [{
							"group": ["lodash/*", "lodash", "!lodash-es"],
							"message": "Please use lodash-es instead."
						  }]
					}
				]
			}
		}
	],
	"settings": {
		"react": {
		  "version": "detect"
		}
	}
}